#!/bin/bash

GMP_ROOT_DIR=$1
UNIT_TEST_PATH=$2
UNIT_TEST=`basename $UNIT_TEST_PATH`
UNIT_TEST_SRC_DIR=`dirname $UNIT_TEST_PATH`
TEST_DRIVER_DIR=$GMP_ROOT_DIR/test-drivers
UNIT_TEST_TGT_DIR=$TEST_DRIVER_DIR/$UNIT_TEST_SRC_DIR/$UNIT_TEST
DEBUG=

if [ -z "$DEBUG" ]; then
	UNIT_TEST_TGT_DIR=$TEST_DRIVER_DIR/$UNIT_TEST_SRC_DIR
fi
cd $GMP_ROOT_DIR/gmp/tests
make libtests.la &> /dev/null
mkdir -p $UNIT_TEST_TGT_DIR
cd $TEST_DRIVER_DIR
if [ -n "$DEBUG" ]; then
	mkdir -p $UNIT_TEST
fi

if [ ! -d libgmp ]; then
	mkdir -p libgmp
	cd libgmp
	cp $GMP_ROOT_DIR/gmp/.libs/libgmp.a .
	ar -x libgmp.a
	cd ..
fi

if [ ! -d libtest ]; then
	mkdir -p libtest
	cd libtest
	cp $GMP_ROOT_DIR/gmp/tests/.libs/libtests.a .
	ar -x libtests.a
	cd ..
fi

if [ ! -d libgmp_r ]; then
	mkdir -p libgmp_r
	cd libgmp
	ls -lb *.o | awk '{ print $9 }' | xargs -I {} objcopy --rename-section .text=.libgmp {} ../libgmp_r/{}
	cd ..
fi

cd $GMP_ROOT_DIR/gmp/$UNIT_TEST_SRC_DIR

# Generate the object file of the driver program
gcc -std=gnu99 -DHAVE_CONFIG_H -I. -I.. -I../.. -O2 -pedantic -m64 -mtune=k8 -march=k8 -c -o $UNIT_TEST.o $UNIT_TEST.c

if [ -n "$DEBUG" ]; then
	# Link the driver program using --whole-archive linker switch
	gcc -std=gnu99 -O2 -pedantic -m64 -mtune=k8 -march=k8 -o $UNIT_TEST-whole $UNIT_TEST.o -Wl,-Map,$UNIT_TEST.map -Wl,-whole-archive $GMP_ROOT_DIR/gmp/tests/.libs/libtests.a $GMP_ROOT_DIR/gmp/.libs/libgmp.a -Wl,-no-whole-archive

	# Copy the object file and exectable of the driver program
	cp $UNIT_TEST.o $UNIT_TEST-whole $UNIT_TEST_TGT_DIR
fi

# Make the root of our test-bed the current directory
cd $TEST_DRIVER_DIR

# Link with each of the object files, but this time in sepecific pre-defined order
gcc -std=gnu99 -O2 -pedantic -m64 -mtune=k8 -march=k8 -Wl,--section-start=.libgmp=0x500000 -o $UNIT_TEST_TGT_DIR/$UNIT_TEST $GMP_ROOT_DIR/gmp/$UNIT_TEST_SRC_DIR/$UNIT_TEST.o `ls -lb libgmp_r/*.o libtest/*.o | awk '{print $9}' | tr '\n' ' '`

# Generate statistics
if [ -n "$DEBUG" ]; then
	cd $UNIT_TEST_TGT_DIR
	echo
	objdump -d $UNIT_TEST-whole > $UNIT_TEST-whole.dis
	objdump -d $UNIT_TEST > $UNIT_TEST.dis
	grep -o "<.*>:" $UNIT_TEST-whole.dis > $UNIT_TEST-whole.sym
	grep -o "<.*>:" $UNIT_TEST.dis > $UNIT_TEST.sym
	echo "Symbol count in $UNIT_TEST-whole.dis (objdump disassembly): `wc -l $UNIT_TEST-whole.sym | cut -d ' ' -f 1`"
	echo "Symbol count in $UNIT_TEST.dis (objdump disassembly): `wc -l $UNIT_TEST.sym | cut -d ' ' -f 1`"
	stat -c "Size of %n (binary) => %s" $UNIT_TEST-whole $UNIT_TEST
	echo "Symbol count in $UNIT_TEST-whole (binary): `nm $UNIT_TEST-whole | wc -l `"
	echo "Symbol count in $UNIT_TEST (binary): `nm $UNIT_TEST | wc -l `"
	echo
fi
