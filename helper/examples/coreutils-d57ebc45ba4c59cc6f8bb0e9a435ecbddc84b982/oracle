#!/bin/bash

SUBDIR=src
SUBJECT=cut
DEBUG=false

assert-equal () {
    ret=`${RUNNER:-eval} ./$SUBDIR/$SUBJECT $1`

    # Save the exit code to prevent it from getting
    # overwritten by subsequent commands
    exit_code=$?

    if [ $DEBUG = true ]; then
        echo "$ret"
    fi


    # To detect crash, check exit code
    # bininject.rb returns error code 139, if the program segfaults
    # For segmentation fault, error code = 139, signal 11
    if [ $exit_code -eq 139 ]; then
    	echo 1
    else
    	echo 0
    fi
}

case "$1" in
    1)
        # Create an empty file to feed as input to 'cut'
        touch $SUBDIR/blank

        # Test requires to pass absolute path to 'blank'
        # Otherwise, 'cut' interpretes the relative path
        # to be relative to 'drrun' (possibly) and returns
        # the following error: "blank: No such file or directory"
        # emitting a process exit code: 1, POSIC Status code: 256
        ret=$(assert-equal "--output-d=: -b1,1234567890- $PWD/$SUBDIR/blank")
        
        if [ $DEBUG = true ]; then
            echo "$ret"
        fi

        # Clean up
        rm -f $SUBDIR/blank

        # Strip out debug message, if any
        # oracle decision is written as the only character (0/1)
        # in the final line of the output from assert call
        ret=`echo "$ret" | tail -n 1`

        # Relay the exit code from assert call as the oracle's decision to the caller
        exit $ret
        ;;
esac
